import { User } from '@bb/common/types/tmpTypes/entityTypes';
import { mockUser } from '@bb/common/fixtures/users/mockUser';

describe('mockUser functions', () => {
  describe('When mockUser().updatePresent() is called', () => {
    it('returns a User with present', () => {
      const res: User = mockUser().updatePresent().value();
      expect(res).toEqual({
        presentAt: res.presentAt, // generated by the mock function
        identified: false,
      });
    });
  });

  describe('When mockUser().createAppUser() is called', () => {
    it('returns a User with present, identified, and an ID', () => {
      const res: User = mockUser().createAppUser().value();
      expect(res).toEqual({
        presentAt: res.presentAt, // generated by the mock function
        identified: true,
        id: res.id, // generated by the mock function
        orderId: res.orderId, // generated by the mock function
      });
    });
  });

  describe('When mockUser().createWalkupUser() is called', () => {
    it('returns a User with present, identified, and NO ID', () => {
      const res: User = mockUser().createWalkupUser().value();
      expect(res).toEqual({
        presentAt: res.presentAt, // generated by the mock function
        identified: true,
        id: undefined,
        orderId: res.orderId, // generated by the mock function
      });
    });
  });
});
